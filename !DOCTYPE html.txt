<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>ULK Web & Internet Programming — All Tasks in One Page</title>
  <style>
    :root{
      --bg:#0b0f19; --card:#121829; --muted:#95a3b3; --text:#e8eef9; --acc:#6aa0ff; --acc2:#72e1a5; --danger:#ff6b6b; --warn:#ffcc66;
      --radius:16px;
    }
    *{box-sizing:border-box}
    html,body{margin:0;height:100%;background:var(--bg);color:var(--text);font-family:system-ui,-apple-system,Segoe UI,Roboto,Ubuntu,"Helvetica Neue",Arial}
    a{color:var(--acc)}
    .app{display:grid;grid-template-columns:280px 1fr;min-height:100vh}
    nav{position:sticky;top:0;align-self:start;height:100vh;overflow:auto;padding:18px;background:#0a1222;border-right:1px solid #1f2a44}
    nav h1{font-size:18px;margin:0 0 12px 0}
    nav .note{font-size:12px;color:var(--muted);margin-bottom:12px}
    nav input[type="search"]{width:100%;padding:10px;border-radius:10px;border:1px solid #1f2a44;background:#0e1a33;color:var(--text)}
    .toc{margin:12px 0;display:grid;gap:8px}
    .toc a{display:block;padding:10px 12px;border-radius:10px;background:#0e1830;border:1px solid #1e2b4d;text-decoration:none;color:var(--text);font-size:14px}
    .toc a:hover{border-color:var(--acc)}

    main{padding:24px}
    section.task{background:var(--card);border:1px solid #1f2a44;border-radius:var(--radius);padding:20px;margin:0 0 20px 0}
    section.task h2{margin:0 0 10px 0;font-size:22px}
    .grid{display:grid;gap:16px}
    .grid.cols-2{grid-template-columns:repeat(2,1fr)}
    .grid.cols-3{grid-template-columns:repeat(3,1fr)}
    .card{background:#0f1730;border:1px solid #223357;border-radius:14px;padding:14px}
    .muted{color:var(--muted)}
    .badge{display:inline-block;padding:4px 8px;border-radius:999px;background:#0e1a33;border:1px solid #1f2a44;font-size:12px;margin-right:6px}
    .row{display:flex;gap:10px;align-items:center;flex-wrap:wrap}
    .btn{appearance:none;border:1px solid #2a3d66;background:#112047;color:#e8eef9;padding:10px 14px;border-radius:12px;cursor:pointer}
    .btn:hover{border-color:var(--acc)}
    .btn.acc{background:linear-gradient(135deg,var(--acc),#3e6edb);border-color:#6aa0ff;color:#081220}
    .btn.warn{background:#2a2308;border-color:#594b11}
    .btn.danger{background:#2a0f14;border-color:#62212c}
    input,select,textarea{width:100%;padding:10px;border-radius:10px;border:1px solid #203056;background:#0e1a33;color:var(--text)}
    label{font-size:14px;color:#cfd8eb}
    form .grid{grid-template-columns:1fr 1fr}
    form .grid.full{grid-template-columns:1fr}
    table{width:100%;border-collapse:collapse}
    th,td{padding:10px;border-bottom:1px solid #223357;text-align:left}
    .ok{color:var(--acc2)}
    .err{color:var(--danger)}
    details{background:#0f1730;border:1px dashed #2c406d;border-radius:12px;padding:10px}
    summary{cursor:pointer}

    /* Responsive */
    @media(max-width: 970px){
      .app{grid-template-columns:1fr}
      nav{position:static;height:auto}
      .grid.cols-2,.grid.cols-3{grid-template-columns:1fr}
    }
  </style>
</head>
<body>
  <div class="app">
    <nav>
      <h1>ULK — All Tasks (1–17)</h1>
      <div class="note">Single-page demo with a <b>mock database</b> (localStorage). PHP/MySQL snippets included in each server-side task.</div>
      <input type="search" id="navSearch" placeholder="Filter tasks…" />
      <div class="toc" id="toc">
        <!-- Links generated by JS -->
      </div>
      <div class="note">Tip: Use this file to demo. For real submissions that require PHP/MySQL, copy the snippets to your server.</div>
    </nav>
    <main id="main">

      <!-- Task 1 & 12: Personal Portfolio + Responsive Layout -->
      <section class="task" id="task1" data-title="Task 1 & 12: Portfolio (Responsive)">
        <h2>Task 1 &amp; 12 — Personal Portfolio + Mobile-Responsive Layout</h2>
        <p class="muted">Responsive portfolio with About, Skills, Projects, and Contact.</p>
        <div class="grid cols-2">
          <div class="card">
            <h3>About Me</h3>
            <p>Hello! I'm <b>Student Name</b>, an aspiring web developer passionate about clean UI, accessible UX, and full‑stack problem solving.</p>
            <ul>
              <li>Based in: Kigali</li>
              <li>Interests: Frontend, PHP/MySQL, Mobile-first design</li>
              <li>Email: student@example.com</li>
            </ul>
            <p><span class="badge">HTML</span><span class="badge">CSS</span><span class="badge">JS</span><span class="badge">PHP</span><span class="badge">MySQL</span></p>
          </div>
          <div class="card">
            <h3>Skills</h3>
            <ul id="skillsList">
              <li>Semantic HTML5</li>
              <li>Modern CSS (Flex/Grid, media queries)</li>
              <li>JavaScript (DOM, fetch, storage)</li>
              <li>PHP (forms, sessions)</li>
              <li>SQL (CRUD)</li>
            </ul>
          </div>
        </div>
        <div class="grid cols-3" style="margin-top:12px">
          <div class="card">
            <h4>Project: Quiz App</h4>
            <p>Interactive MCQ with scoring.</p>
          </div>
          <div class="card">
            <h4>Project: News CRUD</h4>
            <p>Admin can Create/Read/Update/Delete news; latest shows on Home.</p>
          </div>
          <div class="card">
            <h4>Project: Mini Storefront</h4>
            <p>Static e‑commerce layout + dynamic listing demo.</p>
          </div>
        </div>
      </section>

      <!-- Task 2 & 3: Student Registration with validation + save to DB (mock) -->
      <section class="task" id="task2" data-title="Task 2 & 3: Student Registration + Save">
        <h2>Task 2 — Student Registration (Validation) &amp; Task 3 — Save to Database</h2>
        <form id="studentForm">
          <div class="grid">
            <div>
              <label for="stName">Full Name</label>
              <input id="stName" required />
            </div>
            <div>
              <label for="stEmail">Email</label>
              <input id="stEmail" type="email" required />
            </div>
            <div>
              <label for="stDept">Department</label>
              <select id="stDept" required>
                <option value="">Select…</option>
                <option>Computer Science</option>
                <option>Information Systems</option>
                <option>Business IT</option>
              </select>
            </div>
            <div>
              <label for="stID">Student ID</label>
              <input id="stID" required />
            </div>
          </div>
          <div class="row" style="margin-top:10px">
            <button class="btn acc" type="submit">Register Student</button>
            <button class="btn" type="button" id="exportStudents">Export JSON</button>
          </div>
          <p id="studentMsg" class="muted"></p>
        </form>
        <h3>Registered Students (Mock DB)</h3>
        <table id="studentsTable"><thead><tr><th>Name</th><th>Email</th><th>Department</th><th>ID</th></tr></thead><tbody></tbody></table>
        <details style="margin-top:12px">
          <summary>PHP + MySQL Reference Snippets</summary>
<pre><code>// create_table.sql
CREATE TABLE students (
  id INT AUTO_INCREMENT PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  email VARCHAR(120) UNIQUE NOT NULL,
  department VARCHAR(80) NOT NULL,
  student_id VARCHAR(40) NOT NULL
);

// register.php (simplified)
&lt;?php
require 'db.php';
if($_SERVER['REQUEST_METHOD']==='POST'){
  $name = trim($_POST['name'] ?? '');
  $email = trim($_POST['email'] ?? '');
  $dept = trim($_POST['department'] ?? '');
  $sid  = trim($_POST['student_id'] ?? '');
  if(!filter_var($email,FILTER_VALIDATE_EMAIL)) die('Invalid email');
  $stmt = $pdo-&gt;prepare('INSERT INTO students(name,email,department,student_id) VALUES(?,?,?,?)');
  $stmt-&gt;execute([$name,$email,$dept,$sid]);
  echo 'OK';
}
?&gt;</code></pre>
        </details>
      </section>

      <!-- Task 4: Dynamic Login System (mock + snippets) -->
      <section class="task" id="task4" data-title="Task 4: Login System (Sessions & Hashes)">
        <h2>Task 4 — Login System (Hashed Passwords + Session)</h2>
        <div class="grid cols-2">
          <form id="signupForm" class="card">
            <h3>Sign Up</h3>
            <label>Username<input id="suUser" required /></label>
            <label>Email<input id="suEmail" type="email" required /></label>
            <label>Password<input id="suPass" type="password" required /></label>
            <button class="btn acc" type="submit">Create Account</button>
            <div id="suMsg" class="muted"></div>
          </form>
          <form id="loginForm" class="card">
            <h3>Log In</h3>
            <label>Email<input id="liEmail" type="email" required /></label>
            <label>Password<input id="liPass" type="password" required /></label>
            <button class="btn acc" type="submit">Log In</button>
            <div id="liMsg" class="muted"></div>
            <p>Session status: <span id="sessionState" class="badge">guest</span></p>
          </form>
        </div>
        <details>
          <summary>PHP Session + Hashing (reference)</summary>
<pre><code>// users.sql
CREATE TABLE users (
  id INT AUTO_INCREMENT PRIMARY KEY,
  email VARCHAR(120) UNIQUE NOT NULL,
  username VARCHAR(60) NOT NULL,
  pass_hash VARCHAR(255) NOT NULL,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

// signup.php
&lt;?php
require 'db.php';
$email = $_POST['email']; $user = $_POST['username']; $pass = $_POST['password'];
$hash = password_hash($pass, PASSWORD_DEFAULT);
$pdo-&gt;prepare('INSERT INTO users(email,username,pass_hash) VALUES(?,?,?)')-&gt;execute([$email,$user,$hash]);
?&gt;

// login.php
&lt;?php
session_start(); require 'db.php';
$email = $_POST['email']; $pass = $_POST['password'];
$stmt = $pdo-&gt;prepare('SELECT id,pass_hash FROM users WHERE email=?');
$stmt-&gt;execute([$email]); $u = $stmt-&gt;fetch();
if($u && password_verify($pass, $u['pass_hash'])){ $_SESSION['uid']=$u['id']; echo 'OK'; }
else { http_response_code(401); echo 'Invalid'; }
?&gt;</code></pre>
        </details>
      </section>

      <!-- Task 5: Blog Post Submission & display -->
      <section class="task" id="task5" data-title="Task 5: Blog Submission">
        <h2>Task 5 — Blog Post Submission</h2>
        <form id="blogForm" class="grid">
          <div>
            <label>Title<input id="blogTitle" required /></label>
          </div>
          <div class="full">
            <label>Content<textarea id="blogContent" rows="4" required></textarea></label>
          </div>
          <button class="btn acc" type="submit">Save Blog Post</button>
        </form>
        <h3>Blog Posts (from Mock DB)</h3>
        <div id="blogList" class="grid"></div>
        <details><summary>PHP + SQL</summary>
<pre><code>CREATE TABLE posts(id INT AUTO_INCREMENT PRIMARY KEY, title VARCHAR(150), content TEXT, created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP);
// save_post.php: INSERT INTO posts(title,content) VALUES(?,?)
// list_posts.php: SELECT * FROM posts ORDER BY created_at DESC</code></pre>
        </details>
      </section>

      <!-- Task 6: CSS Themed Product Page -->
      <section class="task" id="task6" data-title="Task 6: CSS Product Page">
        <h2>Task 6 — CSS Themed Product Page</h2>
        <div class="grid cols-3" id="productGallery">
          <div class="card"><img alt="Phone" src="data:image/svg+xml,&lt;svg xmlns='http://www.w3.org/2000/svg' width='300' height='160'&gt;&lt;rect width='100%' height='100%' fill='%23121829'/&gt;&lt;text x='50%' y='50%' fill='%2395a3b3' dominant-baseline='middle' text-anchor='middle'&gt;Phone&lt;/text&gt;&lt;/svg&gt;" style="width:100%;border-radius:10px" />
            <h4>Nova Phone X</h4><p class="muted">6.5" display, long battery.</p></div>
          <div class="card"><img alt="Laptop" src="data:image/svg+xml,&lt;svg xmlns='http://www.w3.org/2000/svg' width='300' height='160'&gt;&lt;rect width='100%' height='100%' fill='%23121829'/&gt;&lt;text x='50%' y='50%' fill='%2395a3b3' dominant-baseline='middle' text-anchor='middle'&gt;Laptop&lt;/text&gt;&lt;/svg&gt;" style="width:100%;border-radius:10px" />
            <h4>AeroBook 14</h4><p class="muted">Slim aluminum body.</p></div>
          <div class="card"><img alt="Headphones" src="data:image/svg+xml,&lt;svg xmlns='http://www.w3.org/2000/svg' width='300' height='160'&gt;&lt;rect width='100%' height='100%' fill='%23121829'/&gt;&lt;text x='50%' y='50%' fill='%2395a3b3' dominant-baseline='middle' text-anchor='middle'&gt;Headphones&lt;/text&gt;&lt;/svg&gt;" style="width:100%;border-radius:10px" />
            <h4>Pulse 500</h4><p class="muted">Noise cancelling.</p></div>
        </div>
      </section>

      <!-- Task 7: Interactive Quiz App -->
      <section class="task" id="task7" data-title="Task 7: Quiz App">
        <h2>Task 7 — Quiz App</h2>
        <div id="quiz"></div>
        <button id="quizSubmit" class="btn acc" style="margin-top:10px">Submit Quiz</button>
        <p id="quizScore" class="muted"></p>
      </section>

      <!-- Task 8: Feedback Form with Confirmation Email -->
      <section class="task" id="task8" data-title="Task 8: Feedback + Email">
        <h2>Task 8 — Feedback Form (Confirmation Email)</h2>
        <form id="fbMailForm" class="grid">
          <div><label>Name<input id="fbName" required /></label></div>
          <div><label>Email<input id="fbEmail" type="email" required /></label></div>
          <div class="full"><label>Feedback<textarea id="fbText" rows="3" required></textarea></label></div>
          <button class="btn acc" type="submit">Send</button>
          <span id="fbMailMsg" class="muted"></span>
        </form>
        <details><summary>PHP mail() example</summary>
<pre><code>&lt;?php
$to = $_POST['email'];
$subject = 'Thanks for your feedback';
$body = "Hi {$_POST['name']}, we received your feedback.";
$headers = 'From: noreply@yourdomain.com';
mail($to,$subject,$body,$headers);
?&gt;</code></pre>
        </details>
      </section>

      <!-- Task 9: Mini Online Storefront (Static) -->
      <section class="task" id="task9" data-title="Task 9: Mini Storefront (Static)">
        <h2>Task 9 — Mini Online Storefront (Static Layout)</h2>
        <div class="grid cols-3">
          <div class="card"><h3>Home</h3><p class="muted">Welcome to TechMart — best gadgets at fair prices.</p></div>
          <div class="card"><h3>Products</h3><ul><li>Nova Phone X — $499</li><li>AeroBook 14 — $899</li><li>Pulse 500 — $129</li></ul></div>
          <div class="card"><h3>Cart (Mock)</h3><p class="muted">Items: 0 | Total: $0.00</p></div>
        </div>
      </section>

      <!-- Task 10: Dynamic Product Listing from DB (mock) -->
      <section class="task" id="task10" data-title="Task 10: Dynamic Product Listing">
        <h2>Task 10 — Dynamic Product Listing (from Mock DB)</h2>
        <div class="row">
          <button class="btn acc" id="seedProducts">Seed Sample Products</button>
          <button class="btn" id="clearProducts">Clear Products</button>
        </div>
        <table id="dynProducts"><thead><tr><th>#</th><th>Name</th><th>Price</th></tr></thead><tbody></tbody></table>
        <details><summary>PHP + MySQL Example</summary>
<pre><code>// products.sql
CREATE TABLE products(id INT AUTO_INCREMENT PRIMARY KEY, name VARCHAR(120), price DECIMAL(10,2));
// list_products.php
&lt;?php
require 'db.php';
foreach($pdo-&gt;query('SELECT id,name,price FROM products ORDER BY id DESC') as $row){
  echo "&lt;tr&gt;&lt;td>{$row['id']}&lt;/td&gt;&lt;td>{$row['name']}&lt;/td&gt;&lt;td>{$row['price']}&lt;/td&gt;&lt;/tr&gt;";
}
?&gt;</code></pre>
        </details>
      </section>

      <!-- Task 11: User Profile Page (Update Info) -->
      <section class="task" id="task11" data-title="Task 11: User Profile Update">
        <h2>Task 11 — User Profile Update</h2>
        <form id="profileForm" class="grid">
          <div><label>Name<input id="pfName" /></label></div>
          <div><label>Change Password<input id="pfPass" type="password" /></label></div>
          <div class="full"><label>Photo<input id="pfPhoto" type="file" accept="image/*" /></label></div>
          <button class="btn acc" type="submit">Save Profile</button>
          <span id="pfMsg" class="muted"></span>
        </form>
        <div class="card" style="margin-top:10px">
          <h4>Preview</h4>
          <img id="pfPreview" alt="Profile" style="width:100px;height:100px;border-radius:50%;object-fit:cover"/>
        </div>
        <details><summary>PHP Update Example</summary>
<pre><code>// profile table could reuse users (add name, photo blob/path)
// update_profile.php: verify session, then UPDATE users SET name=?, pass_hash=?, photo_path=? WHERE id=?</code></pre>
        </details>
      </section>

      <!-- Task 13: Visitor Counter -->
      <section class="task" id="task13" data-title="Task 13: Visitor Counter">
        <h2>Task 13 — Visitor Counter</h2>
        <p>Total visits to this page (mock): <b id="visitCount">0</b></p>
        <details><summary>PHP (file-based) Example</summary>
<pre><code>&lt;?php
$path = 'counter.txt';
if(!file_exists($path)) file_put_contents($path,'0');
$hits = (int)file_get_contents($path);
$hits++;
file_put_contents($path,(string)$hits);
echo $hits;
?&gt;</code></pre>
        </details>
      </section>

      <!-- Task 14: News Article Manager (CRUD) -->
      <section class="task" id="task14" data-title="Task 14: News CRUD">
        <h2>Task 14 — News Article Manager (CRUD)</h2>
        <form id="newsForm" class="grid">
          <div><label>Title<input id="newsTitle" required /></label></div>
          <div class="full"><label>Body<textarea id="newsBody" rows="3" required></textarea></label></div>
          <button class="btn acc" type="submit">Create / Update</button>
          <input type="hidden" id="newsId" />
        </form>
        <h3>Latest News</h3>
        <div id="newsList" class="grid"></div>
        <details><summary>PHP + SQL</summary>
<pre><code>CREATE TABLE news(id INT AUTO_INCREMENT PRIMARY KEY, title VARCHAR(150), body TEXT, created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP);
// CRUD endpoints: create_news.php, update_news.php, delete_news.php, list_news.php</code></pre>
        </details>
      </section>

      <!-- Task 15: Contact Form with Validation and Storage -->
      <section class="task" id="task15" data-title="Task 15: Contact Form + Storage">
        <h2>Task 15 — Contact Form (Validation + Stored)</h2>
        <form id="contactForm" class="grid">
          <div><label>Name<input id="ctName" required /></label></div>
          <div><label>Email<input id="ctEmail" type="email" required /></label></div>
          <div class="full"><label>Message<textarea id="ctMsg" rows="3" required></textarea></label></div>
          <button class="btn acc" type="submit">Send</button>
        </form>
        <div id="contactAlert" class="ok" style="margin-top:8px"></div>
        <details><summary>PHP Insert Example</summary>
<pre><code>CREATE TABLE messages(id INT AUTO_INCREMENT PRIMARY KEY, name VARCHAR(100), email VARCHAR(120), message TEXT, created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP);
// save_message.php: INSERT INTO messages(name,email,message) VALUES(?,?,?)</code></pre>
        </details>
      </section>

      <!-- Task 16: Event Registration System -->
      <section class="task" id="task16" data-title="Task 16: Event Registration">
        <h2>Task 16 — Event Registration System</h2>
        <form id="eventForm" class="grid">
          <div><label>Name<input id="evName" required /></label></div>
          <div><label>Email<input id="evEmail" type="email" required /></label></div>
          <div><label>Department<select id="evDept" required><option value="">Select…</option><option>Computer Science</option><option>Information Systems</option><option>Business IT</option></select></label></div>
          <button class="btn acc" type="submit">Register</button>
        </form>
        <h3>Admin View (Registered Students)</h3>
        <table id="eventTable"><thead><tr><th>Name</th><th>Email</th><th>Department</th></tr></thead><tbody></tbody></table>
        <details><summary>PHP + SQL</summary>
<pre><code>CREATE TABLE registrations(id INT AUTO_INCREMENT PRIMARY KEY, name VARCHAR(100), email VARCHAR(120), department VARCHAR(80), created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP);
// register_event.php (INSERT) & admin_list.php (SELECT)</code></pre>
        </details>
      </section>

      <!-- Task 17: Feedback & Rating System -->
      <section class="task" id="task17" data-title="Task 17: Feedback + Rating">
        <h2>Task 17 — Feedback &amp; Rating System</h2>
        <form id="rateForm" class="grid">
          <div><label>Name<input id="rtName" required /></label></div>
          <div><label>Rating<select id="rtScore" required>
            <option value="">Select…</option>
            <option>1</option><option>2</option><option>3</option><option>4</option><option>5</option>
          </select></label></div>
          <div class="full"><label>Comment<textarea id="rtComment" rows="3"></textarea></label></div>
          <button class="btn acc" type="submit">Submit Feedback</button>
        </form>
        <div class="row" style="margin:10px 0"><button class="btn" id="sortRating">Sort by Rating</button><button class="btn" id="sortDate">Sort by Date</button></div>
        <div id="rateList" class="grid"></div>
        <details><summary>PHP + SQL</summary>
<pre><code>CREATE TABLE feedback(id INT AUTO_INCREMENT PRIMARY KEY, name VARCHAR(100), score TINYINT, comment TEXT, created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP);
// save_feedback.php (INSERT) and list_feedback.php (ORDER BY created_at DESC or score DESC)</code></pre>
        </details>
      </section>

    </main>
  </div>

  <script>
    // =============== Helper: tiny router-ish TOC and utility ===============
    const $$ = (sel, root=document) => Array.from(root.querySelectorAll(sel));

    // Build TOC
    const toc = document.getElementById('toc');
    const sections = $$('.task');
    sections.forEach(sec => {
      const a = document.createElement('a');
      a.href = #${sec.id};
      a.textContent = sec.dataset.title || sec.querySelector('h2')?.textContent || sec.id;
      toc.appendChild(a);
    });
    document.getElementById('navSearch').addEventListener('input', e => {
      const q = e.target.value.toLowerCase();
      $$('#toc a').forEach(a => {
        a.style.display = a.textContent.toLowerCase().includes(q) ? 'block' : 'none';
      });
    });

    // Mock DB (localStorage wrapper)
    const DB = {
      get(key, def){ try{ return JSON.parse(localStorage.getItem(key)) ?? def } catch{ return def } },
      set(key, val){ localStorage.setItem(key, JSON.stringify(val)); },
      push(key, item){ const arr = DB.get(key, []); arr.push(item); DB.set(key, arr); return arr; },
      clear(key){ localStorage.removeItem(key); }
    };

    // =============== Task 2 & 3: Student Registration ===============
    const studentForm = document.getElementById('studentForm');
    const studentsTable = document.querySelector('#studentsTable tbody');
    const studentMsg = document.getElementById('studentMsg');

    function renderStudents(){
      const rows = DB.get('students', []);
      studentsTable.innerHTML = rows.map(s => <tr><td>${s.name}</td><td>${s.email}</td><td>${s.dept}</td><td>${s.sid}</td></tr>).join('');
    }
    studentForm.addEventListener('submit', (e)=>{
      e.preventDefault();
      const name = document.getElementById('stName').value.trim();
      const email = document.getElementById('stEmail').value.trim();
      const dept = document.getElementById('stDept').value;
      const sid  = document.getElementById('stID').value.trim();
      if(!name || !email || !dept || !sid){ studentMsg.textContent = 'All fields are required.'; studentMsg.className='err'; return; }
      if(!/^[^@\s]+@[^@\s]+\.[^@\s]+$/.test(email)){ studentMsg.textContent='Invalid email format.'; studentMsg.className='err'; return; }
      DB.push('students',{name,email,dept,sid});
      studentMsg.textContent='Saved ✓'; studentMsg.className='ok';
      studentForm.reset(); renderStudents();
    });
    document.getElementById('exportStudents').onclick = () => {
      const blob = new Blob([JSON.stringify(DB.get('students',[]),null,2)], {type:'application/json'});
      const url = URL.createObjectURL(blob); const a=document.createElement('a'); a.href=url; a.download='students.json'; a.click(); URL.revokeObjectURL(url);
    };
    renderStudents();

    // =============== Task 4: Login System (mocked) ===============
    async function sha256(str){
      const bytes = new TextEncoder().encode(str);
      const hash = await crypto.subtle.digest('SHA-256', bytes);
      return Array.from(new Uint8Array(hash)).map(b=>b.toString(16).padStart(2,'0')).join('');
    }
    const su = {form: document.getElementById('signupForm'), user: document.getElementById('suUser'), email: document.getElementById('suEmail'), pass: document.getElementById('suPass'), msg: document.getElementById('suMsg')};
    const li = {form: document.getElementById('loginForm'), email: document.getElementById('liEmail'), pass: document.getElementById('liPass'), msg: document.getElementById('liMsg'), state: document.getElementById('sessionState')};

    su.form.addEventListener('submit', async (e)=>{
      e.preventDefault();
      const users = DB.get('users', []);
      const exists = users.find(u => u.email === su.email.value.trim());
      if(exists){ su.msg.textContent='Email already registered.'; su.msg.className='err'; return; }
      const hash = await sha256(su.pass.value);
      users.push({username: su.user.value.trim(), email: su.email.value.trim(), pass_hash: hash});
      DB.set('users', users); su.msg.textContent='Account created ✓'; su.msg.className='ok'; su.form.reset();
    });
    function setSession(email){ sessionStorage.setItem('session', email || ''); li.state.textContent = email ? 'logged in' : 'guest'; }
    setSession(sessionStorage.getItem('session'));
    li.form.addEventListener('submit', async (e)=>{
      e.preventDefault();
      const users = DB.get('users', []);
      const user = users.find(u => u.email === li.email.value.trim());
      const hash = await sha256(li.pass.value);
      if(user && user.pass_hash === hash){ li.msg.textContent='Welcome!'; li.msg.className='ok'; setSession(user.email); }
      else { li.msg.textContent='Invalid credentials'; li.msg.className='err'; setSession(''); }
    });

    // =============== Task 5: Blog ===============
    const blogForm = document.getElementById('blogForm');
    const blogList = document.getElementById('blogList');
    function renderBlogs(){
      const posts = DB.get('posts', []).sort((a,b)=>b.ts-a.ts);
      blogList.innerHTML = posts.map(p => <div class='card'><h4>${p.title}</h4><p class='muted'>${new Date(p.ts).toLocaleString()}</p><p>${p.content}</p></div>).join('');
    }
    blogForm.addEventListener('submit',(e)=>{
      e.preventDefault();
      const title = document.getElementById('blogTitle').value.trim();
      const content = document.getElementById('blogContent').value.trim();
      DB.push('posts',{title,content,ts:Date.now()}); blogForm.reset(); renderBlogs();
    });
    renderBlogs();

    // =============== Task 7: Quiz App ===============
    const quizQs = [
      { q:'HTML stands for?', a:['Hyper Trainer Marking Language','HyperText Markup Language','HyperText Markdown Language'], correct:1 },
      { q:'Which tag creates a hyperlink?', a:['<link>','<a>','<href>'], correct:1 },
      { q:'Which property is for grid columns?', a:['grid-template-columns','flex-direction','display-block'], correct:0 }
    ];
    const quizDiv = document.getElementById('quiz');
    quizDiv.innerHTML = quizQs.map((it,i)=>{
      return <div class='card'><p><b>Q${i+1}.</b> ${it.q}</p>+
             it.a.map((opt,j)=><label class='row'><input type='radio' name='q${i}' value='${j}'> ${opt}</label>).join('')+
             </div>
    }).join('');
    document.getElementById('quizSubmit').onclick = () => {
      let score = 0;
      quizQs.forEach((it,i)=>{
        const v = document.querySelector(input[name=q${i}]:checked);
        if(v && Number(v.value)===it.correct) score++;
      });
      document.getElementById('quizScore').textContent = Your score: ${score} / ${quizQs.length};
    };

    // =============== Task 8: Feedback + Email (simulate) ===============
    document.getElementById('fbMailForm').addEventListener('submit',(e)=>{
      e.preventDefault();
      const name = document.getElementById('fbName').value.trim();
      const email= document.getElementById('fbEmail').value.trim();
      const text = document.getElementById('fbText').value.trim();
      if(!name || !email || !text){ document.getElementById('fbMailMsg').textContent='All fields required.'; return; }
      document.getElementById('fbMailMsg').textContent = 'Simulated send ✓ (use PHP mail() on server)';
    });

    // =============== Task 10: Dynamic Products (mock) ===============
    const dynProductsBody = document.querySelector('#dynProducts tbody');
    function renderDynProducts(){
      const list = DB.get('products', []);
      dynProductsBody.innerHTML = list.map((p,i)=><tr><td>${i+1}</td><td>${p.name}</td><td>$${p.price.toFixed(2)}</td></tr>).join('');
    }
    document.getElementById('seedProducts').onclick = ()=>{
      DB.set('products',[{name:'Nova Phone X',price:499},{name:'AeroBook 14',price:899},{name:'Pulse 500',price:129}]);
      renderDynProducts();
    };
    document.getElementById('clearProducts').onclick = ()=>{ DB.clear('products'); renderDynProducts(); };
    renderDynProducts();

    // =============== Task 11: Profile Update (mock) ===============
    const pfForm = document.getElementById('profileForm');
    const pfPreview = document.getElementById('pfPreview');
    function loadProfile(){ const p = DB.get('profile',{}); document.getElementById('pfName').value=p.name||''; pfPreview.src=p.photo||''; }
    pfForm.addEventListener('submit', async (e)=>{
      e.preventDefault();
      const name = document.getElementById('pfName').value.trim();
      const pass = document.getElementById('pfPass').value;
      const file = document.getElementById('pfPhoto').files[0];
      let photoData = DB.get('profile',{}).photo || '';
      if(file){ photoData = await fileToDataURL(file); }
      const profile = { name, pass_hash: pass ? await sha256(pass) : DB.get('profile',{}).pass_hash, photo: photoData };
      DB.set('profile', profile); document.getElementById('pfMsg').textContent='Profile updated ✓'; loadProfile(); pfForm.reset();
    });
    function fileToDataURL(file){ return new Promise(res=>{ const r=new FileReader(); r.onload=()=>res(r.result); r.readAsDataURL(file); }); }
    loadProfile();

    // =============== Task 13: Visitor Counter (mock) ===============
    const vKey = 'visits';
    const v = (Number(localStorage.getItem(vKey))||0)+1; localStorage.setItem(vKey, String(v));
    document.getElementById('visitCount').textContent = v;

    // =============== Task 14: News CRUD ===============
    const newsForm = document.getElementById('newsForm');
    const newsList = document.getElementById('newsList');
    function renderNews(){
      const items = DB.get('news', []).sort((a,b)=>b.ts-a.ts);
      newsList.innerHTML = items.map(n => <div class='card'><h4>${n.title}</h4><p class='muted'>${new Date(n.ts).toLocaleString()}</p><p>${n.body}</p><div class='row'><button class='btn' data-edit='${n.id}'>Edit</button><button class='btn danger' data-del='${n.id}'>Delete</button></div></div>).join('');
      // bind buttons
      $$('.btn[data-edit]').forEach(b=> b.onclick = () => editNews(Number(b.dataset.edit)) );
      $$('.btn[data-del]').forEach(b=> b.onclick = () => delNews(Number(b.dataset.del)) );
    }
    function editNews(id){ const list = DB.get('news',[]); const n = list.find(x=>x.id===id); if(!n) return; document.getElementById('newsId').value=n.id; document.getElementById('newsTitle').value=n.title; document.getElementById('newsBody').value=n.body; }
    function delNews(id){ const list = DB.get('news',[]).filter(x=>x.id!==id); DB.set('news', list); renderNews(); }
    newsForm.addEventListener('submit', (e)=>{
      e.preventDefault();
      const id = Number(document.getElementById('newsId').value || 0);
      const title = document.getElementById('newsTitle').value.trim();
      const body  = document.getElementById('newsBody').value.trim();
      let list = DB.get('news', []);
      if(id){ list = list.map(n=> n.id===id ? {...n,title,body,ts:Date.now()} : n ); }
      else { const nid = (list.reduce((m,x)=>Math.max(m,x.id),0)||0)+1; list.push({id:nid,title,body,ts:Date.now()}); }
      DB.set('news', list); newsForm.reset(); renderNews();
    });
    renderNews();

    // =============== Task 15: Contact Form ===============
    document.getElementById('contactForm').addEventListener('submit', (e)=>{
      e.preventDefault();
      const name=document.getElementById('ctName').value.trim();
      const email=document.getElementById('ctEmail').value.trim();
      const message=document.getElementById('ctMsg').value.trim();
      if(!name || !email || !message){ document.getElementById('contactAlert').textContent='All fields required.'; document.getElementById('contactAlert').className='err'; return; }
      DB.push('messages',{name,email,message,ts:Date.now()});
      document.getElementById('contactAlert').textContent='Message saved successfully ✓'; document.getElementById('contactAlert').className='ok';
      e.target.reset();
    });

    // =============== Task 16: Event Registration ===============
    const eventForm = document.getElementById('eventForm');
    const eventTable = document.querySelector('#eventTable tbody');
    function renderEvents(){ const rows = DB.get('registrations',[]); eventTable.innerHTML = rows.map(r=><tr><td>${r.name}</td><td>${r.email}</td><td>${r.dept}</td></tr>).join(''); }
    eventForm.addEventListener('submit',(e)=>{
      e.preventDefault();
      const name=document.getElementById('evName').value.trim();
      const email=document.getElementById('evEmail').value.trim();
      const dept=document.getElementById('evDept').value;
      if(!name || !email || !dept){ alert('All fields required'); return; }
      if(!/^[^@\s]+@[^@\s]+\.[^@\s]+$/.test(email)){ alert('Invalid email'); return; }
      DB.push('registrations',{name,email,dept,ts:Date.now()});
      e.target.reset(); renderEvents();
    });
    renderEvents();

    // =============== Task 17: Feedback + Rating ===============
    const rateForm = document.getElementById('rateForm');
    const rateList = document.getElementById('rateList');
    let rateSort = 'date';
    function renderRates(){
      let items = DB.get('shopFeedback', []);
      items = items.sort((a,b)=> rateSort==='rating' ? b.score - a.score : b.ts - a.ts);
      rateList.innerHTML = items.map(f=><div class='card'><p><b>${f.name}</b> — <span class='badge'>${f.score}★</span> <span class='muted'>${new Date(f.ts).toLocaleString()}</span></p><p>${f.comment||''}</p></div>).join('');
    }
    rateForm.addEventListener('submit',(e)=>{
      e.preventDefault();
      const name=document.getElementById('rtName').value.trim();
      const score=Number(document.getElementById('rtScore').value);
      const comment=document.getElementById('rtComment').value.trim();
      if(!name || !score){ alert('Name and rating required.'); return; }
      DB.push('shopFeedback',{name,score,comment,ts:Date.now()}); rateForm.reset(); renderRates();
    });
    document.getElementById('sortRating').onclick = ()=>{ rateSort='rating'; renderRates(); };
    document.getElementById('sortDate').onclick = ()=>{ rateSort='date'; renderRates(); };
    renderRates();
  </script>
</body>
</html>